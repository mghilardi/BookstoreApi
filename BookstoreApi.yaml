openapi: "3.1.0"
info:
  title: "BookstoreApi API"
  description: "BookstoreApi API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8081"
paths:
  /books/{id}:
    put:
      summary: "PUT books/{id}"
      operationId: "updateBook"
      tags:
        - books
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
    delete:
      summary: "DELETE books/{id}"
      operationId: "deleteBook"
      tags:
        - books
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      summary: "GET books/{id}"
      operationId: "getBook"
      tags:
        - books
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
  /books:
    post:
      summary: "POST books"
      operationId: "createBook"
      tags:
        - books
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Book"
    get:
      summary: "GET books"
      operationId: "listBooks"
      tags:
        - books
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Book"
  /customers/{id}:
    put:
      summary: "PUT customers/{id}"
      operationId: "updateCustomer"
      tags:
        - customers
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Customer"
    delete:
      summary: "DELETE customers/{id}"
      operationId: "deleteCustomer"
      tags:
        - customers
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      summary: "GET customers/{id}"
      operationId: "getCustomer"
      tags:
        - customers
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Customer"
  /customers:
    post:
      summary: "POST customers"
      operationId: "createCustomer"
      tags:
        - customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Customer"
    get:
      summary: "GET customers"
      operationId: "listCustomers"
      tags:
        - customers
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Customer"
  /orders/{id}:
    put:
      summary: "PUT orders/{id}"
      operationId: "updateOrder"
      tags:
        - orders
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
    delete:
      summary: "DELETE orders/{id}"
      operationId: "deleteOrder"
      tags:
        - orders
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
    get:
      summary: "GET orders/{id}"
      operationId: "getOrder"
      tags:
        - orders
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
  /orders:
    post:
      summary: "POST orders"
      operationId: "createOrder"
      tags:
        - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
    get:
      summary: "GET orders"
      operationId: "listOrders"
      tags:
        - orders
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
components:
  schemas:
    BigDecimal:
      type: "object"
      properties: { }
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        isbn:
          type: "string"
        title:
          type: "string"
        author:
          type: "string"
        price:
          $ref: "#/components/schemas/BigDecimal"
        quantity:
          type: "integer"
          format: "int32"
        description:
          type: "string"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
      required:
        - "headers"
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        customer:
          $ref: "#/components/schemas/Customer"
        created_at:
          type: "string"
          format: "date-time"
        books:
          type: "array"
          items:
            $ref: "#/components/schemas/Book"
    Customer:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
        orders:
          type: "array"
          items:
            $ref: "#/components/schemas/Order"